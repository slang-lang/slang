
import System.Collections.Vector;

public object #VIEW_PREFIX##ENTITY_NAME_PRETTY##VIEW_POSTFIX# {
#MEMBER_DECLARATION#

	public void Constructor( int databaseHandle ) {
		DB = databaseHandle;
	}

	public void Constructor( int databaseHandle, string query ) {
		DB = databaseHandle;

		loadByQuery( query );
	}

	public void loadByQuery( string query ) modify throws {
		int error = mysql_query( DB, query );
		if ( error ) {
			throw mysql_error( DB );
		}

		int result = mysql_store_result( DB );
		if ( !mysql_fetch_row( result ) ) {
			throw "no result found";
		}

#MEMBER_LOAD#
	}

	public void loadByPrimaryKey( #PRIMARY_KEY_TYPE# #PRIMARY_KEY_NAME# ) modify throws {
		string query = "SELECT * FROM #ENTITY_NAME# WHERE #PRIMARY_KEY_NAME# = '" + #PRIMARY_KEY_NAME# + "'";

		int error = mysql_query( DB, query );
		if ( error ) {
			throw mysql_error( DB );
		}

		int result = mysql_store_result( DB );
		if ( !mysql_fetch_row( result ) ) {
			throw "no result found";
		}

#MEMBER_LOAD#
	}

	public void loadByResult( int result ) modify {
#MEMBER_LOAD#
	}

	public bool operator==( #VIEW_PREFIX##ENTITY_NAME_PRETTY##VIEW_POSTFIX# other const ) const {
		return #PRIMARY_KEY_NAME_PRETTY# == other.#PRIMARY_KEY_NAME_PRETTY#;
	}

	public string =operator( string ) const {
		return "#VIEW_PREFIX##ENTITY_NAME_PRETTY##VIEW_POSTFIX# { #MEMBER_VALUES# }";
	}

	private int DB const;
}


public object #VIEW_PREFIX##ENTITY_NAME_PRETTY#Collection {
	public void Constructor( int databaseHandle, string query = "" ) {
		Collection = new Vector<#VIEW_PREFIX##ENTITY_NAME_PRETTY##VIEW_POSTFIX#>();
		DB = databaseHandle;

		if ( query ) {
			loadByQuery( query );
		}
	}

	public #VIEW_PREFIX##ENTITY_NAME_PRETTY##VIEW_POSTFIX# at( int index ) const throws {
		return Collection.at( index );
	}

	public bool empty() const {
		return Collection.empty();
	}

	public Iterator<#VIEW_PREFIX##ENTITY_NAME_PRETTY##VIEW_POSTFIX#> getIterator() const {
		return new Iterator<#VIEW_PREFIX##ENTITY_NAME_PRETTY##VIEW_POSTFIX#>( ICollection Collection );
	}

	public void loadByQuery( string query ) modify throws {
		int error = mysql_query( DB, query );
		if ( error ) {
			throw mysql_error( DB );
		}

		Collection.clear();

		int result = mysql_store_result( DB );
		while ( mysql_fetch_row( result ) ) {
			var record = new #VIEW_PREFIX##ENTITY_NAME_PRETTY##VIEW_POSTFIX#( DB );
			record.loadByResult( result );

			Collection.push_back( record );
		}
	}

	public int size() const {
		return Collection.size();
	}

	private Vector<#VIEW_PREFIX##ENTITY_NAME_PRETTY##VIEW_POSTFIX#> Collection;
	private int DB const;
}

